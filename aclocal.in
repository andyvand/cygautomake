#!@PERL@ -w
# -*- perl -*-
# @configure_input@

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

# aclocal - create aclocal.m4 by scanning configure.ac

# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
#           Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# Written by Tom Tromey <tromey@redhat.com>, and
# Alexandre Duret-Lutz <adl@gnu.org>.

BEGIN
{
  my $perllibdir = $ENV{'perllibdir'} || '@datadir@/@PACKAGE@-@APIVERSION@';
  unshift @INC, (split '@PATH_SEPARATOR@', $perllibdir);
}

use strict;

use Automake::Config;
use Automake::General;
use Automake::Configure_ac;
use Automake::Channels;
use Automake::ChannelDefs;
use Automake::XFile;
use Automake::FileUtils;
use File::Basename;
use File::stat;
use Cwd;

# Some globals.

# Include paths for searching macros.  We search macros in this order:
# user-supplied directories first, then the directory containing the
# automake macros, and finally the system-wide directories for
# third-party macro.  @user_includes can be augmented with -I.
# @system_includes can be augmented with the `dirlist' file.  Also
# --acdir will reset both @automake_includes and @system_includes.
my @user_includes = ();
my @automake_includes = ("@datadir@/aclocal-$APIVERSION");
my @system_includes = ('@datadir@/aclocal');

# configure.ac or configure.in.
my $configure_ac;

# Output file name.
my $output_file = 'aclocal.m4';

# Modification time of the youngest dependency.
my $greatest_mtime = 0;

# Option --force.
my $force_output = 0;

# Which macros have been seen.
my %macro_seen = ();

# Which files have been seen.
my %file_seen = ();

# Remember the order into which we scanned the files.
# It's important to output the contents of aclocal.m4 in the opposite order.
# (Definitions in first files we have scanned should override those from
# later files.  So they must appear last in the output.)
my @file_order = ();

# Map macro names to file names.
my %map = ();

# Ditto, but records the last definition of each macro as returned by --trace.
my %map_traced_defs = ();

# Map file names to file contents.
my %file_contents = ();

# Map file names to file types.
my %file_type = ();
use constant FT_USER => 1;
use constant FT_AUTOMAKE => 2;
use constant FT_SYSTEM => 3;

# Map file names to included files (transitively closed).
my %file_includes = ();

# Matches a macro definition.
#   AC_DEFUN([macroname], ...)
# or
#   AC_DEFUN(macroname, ...)
# When macroname is `['-quoted , we accept any character in the name,
# except `]'.  Otherwise macroname stops on the first `]', `,', `)',
# or `\n' encountered.
my $ac_defun_rx =
  "(?:A[CU]_DEFUN|AC_DEFUN_ONCE)\\((?:\\[([^]]+)\\]|([^],)\n]+))";

# Matches an AC_REQUIRE line.
my $ac_require_rx = "AC_REQUIRE\\((?:\\[([^]]+)\\]|([^],)\n]+))\\)";

# Matches an m4_include line
my $m4_include_rx = "(?:m4_)?s?include\\((?:\\[([^]]+)\\]|([^],)\n]+))\\)";


################################################################

# Check macros in acinclude.m4.  If one is not used, warn.
sub check_acinclude ()
{
  foreach my $key (keys %map)
    {
      # FIXME: should print line number of acinclude.m4.
      msg ('syntax', "warning: macro `$key' defined in "
	   . "acinclude.m4 but never used")
	if $map{$key} eq 'acinclude.m4' && ! exists $macro_seen{$key};
    }
}

################################################################

# scan_m4_dirs($TYPE, @DIRS)
# --------------------------
# Scan all M4 files installed in @DIRS for new macro definitions.
# Register each file as of type $TYPE (one of the FT_* constants).
sub scan_m4_dirs ($@)
{
  my ($type, @dirlist) = @_;

  foreach my $m4dir (@dirlist)
    {
      if (! opendir (DIR, $m4dir))
	{
	  fatal "couldn't open directory `$m4dir': $!";
	}

      # We reverse the directory contents so that foo2.m4 gets
      # used in preference to foo1.m4.
      foreach my $file (reverse sort grep (! /^\./, readdir (DIR)))
	{
	  # Only examine .m4 files.
	  next unless $file =~ /\.m4$/;

	  # Skip some files when running out of srcdir.
	  next if $file eq 'aclocal.m4';

	  my $fullfile = File::Spec->canonpath ("$m4dir/$file");
	    &scan_file ($type, $fullfile, 'aclocal');
	}
      closedir (DIR);
    }
}

# Scan all the installed m4 files and construct a map.
sub scan_m4_files ()
{
  # First, scan configure.ac.  It may contain macro definitions,
  # or may include other files that define macros.
  &scan_file (FT_USER, $configure_ac, 'aclocal');

  # Then, scan acinclude.m4 if it exists.
  if (-f 'acinclude.m4')
    {
      &scan_file (FT_USER, 'acinclude.m4', 'aclocal');
    }

  # Finally, scan all files in our search paths.
  scan_m4_dirs (FT_USER, @user_includes);
  scan_m4_dirs (FT_AUTOMAKE, @automake_includes);
  scan_m4_dirs (FT_SYSTEM, @system_includes);

  # Construct a new function that does the searching.  We use a
  # function (instead of just evaluating $search in the loop) so that
  # "die" is correctly and easily propagated if run.
  my $search = "sub search {\nmy \$found = 0;\n";
  foreach my $key (reverse sort keys %map)
    {
      $search .= ('if (/\b\Q' . $key . '\E(?!\w)/) { & add_macro ("' . $key
		  . '"); $found = 1; }' . "\n");
    }
  $search .= "return \$found;\n};\n";
  eval $search;
  prog_error "$@\n search is $search" if $@;
}

################################################################

# Add a macro to the output.
sub add_macro ($)
{
  my ($macro) = @_;

  # Ignore unknown required macros.  Either they are not really
  # needed (e.g., a conditional AC_REQUIRE), in which case aclocal
  # should be quiet, or they are needed and Autoconf itself will
  # complain when we trace for macro usage later.
  return unless defined $map{$macro};

  verb "saw macro $macro";
  $macro_seen{$macro} = 1;
  &add_file ($map{$macro});
}

# scan_configure_dep ($file)
# --------------------------
# Scan a configure dependency (configure.ac, or separate m4 files)
# for uses of know macros and AC_REQUIREs of possibly unknown macros.
# Recursively scan m4_included files.
my %scanned_configure_dep = ();
sub scan_configure_dep ($)
{
  my ($file) = @_;
  # Do not scan a file twice.
  return ()
    if exists $scanned_configure_dep{$file};
  $scanned_configure_dep{$file} = 1;

  my $mtime = mtime $file;
  $greatest_mtime = $mtime if $greatest_mtime < $mtime;

  my $contents = exists $file_contents{$file} ?
    $file_contents{$file} : contents $file;

  my $line = 0;
  my @rlist = ();
  my @ilist = ();
  foreach (split ("\n", $contents))
    {
      ++$line;
      # Remove comments from current line.
      s/\bdnl\b.*$//;
      s/\#.*$//;

      while (/$m4_include_rx/go)
	{
	  push (@ilist, $1 || $2);
	}

      while (/$ac_require_rx/go)
	{
	  push (@rlist, $1 || $2);
	}

      # The search function is constructed dynamically by
      # scan_m4_files.  The last parenthetical match makes sure we
      # don't match things that look like macro assignments or
      # AC_SUBSTs.
      if (! &search && /(^|\s+)(AM_[A-Z0-9_]+)($|[^\]\)=A-Z0-9_])/)
	{
	  # Macro not found, but AM_ prefix found.
	  # Make this just a warning, because we do not know whether
	  # the macro is actually used (it could be called conditionally).
	  msg ('unsupported', "$file:$line",
	       "warning: macro `$2' not found in library");
	}
    }

  add_macro ($_) foreach (@rlist);
  my $dirname = dirname $file;
  &scan_configure_dep (File::Spec->rel2abs ($_, $dirname)) foreach (@ilist);
}

# Add a file to output.
sub add_file ($)
{
  my ($file) = @_;

  # Only add a file once.
  return if ($file_seen{$file});
  $file_seen{$file} = 1;

  scan_configure_dep $file;
}

# Point to the documentation for underquoted AC_DEFUN only once.
my $underquoted_manual_once = 0;

# scan_file ($TYPE, $FILE, $WHERE)
# -------------------------
# Scan a single M4 file ($FILE), and all files it includes.
# Return the list of included files.
# $TYPE is one of FT_USER, FT_AUTOMAKE, or FT_SYSTEM, depending
# on where the file comes from.
# $WHERE is the location to use in the diagnostic if the file
# does not exist.
sub scan_file ($$$)
{
  my ($type, $file, $where) = @_;
  my $base = dirname $file;

  # Do not scan the same file twice.
  return @{$file_includes{$file}} if exists $file_includes{$file};
  # Prevent potential infinite recursion (if two files include each other).
  return () if exists $file_contents{$file};

  unshift @file_order, $file;

  $file_type{$file} = $type;

  fatal "$where: file `$file' does not exist" if ! -e $file;

  my $fh = new Automake::XFile $file;
  my $contents = '';
  my @inc_files = ();
  my %inc_lines = ();
  while ($_ = $fh->getline)
    {
      # Ignore `##' lines.
      next if /^##/;

      $contents .= $_;
      my $line = $_;

      while ($line =~ /$ac_defun_rx/go)
	{
	  if (! defined $1)
	    {
	      msg ('syntax', "$file:$.", "warning: underquoted definition of $2"
		   . "\n  run info '(automake)Extending aclocal'\n"
		   . "  or see http://sources.redhat.com/automake/"
		   . "automake.html#Extending-aclocal")
		unless $underquoted_manual_once;
	      $underquoted_manual_once = 1;
	    }
	  my $macro = $1 || $2;
	  if (! defined $map{$macro})
	    {
	      verb "found macro $macro in $file: $.";
	      $map{$macro} = $file;
	    }
	  else
	    {
	      # Note: we used to give an error here if we saw a
	      # duplicated macro.  However, this turns out to be
	      # extremely unpopular.  It causes actual problems which
	      # are hard to work around, especially when you must
	      # mix-and-match tool versions.
	      verb "ignoring macro $macro in $file: $.";
	    }
	}

      while ($line =~ /$m4_include_rx/go)
	{
	  my $ifile = $1 || $2;
	  # m4_include is relative to the directory of the file which
	  # perform the include, but we want paths relative to the
	  # directory where aclocal is run.  Do not use
	  # File::Spec->rel2abs, because we want to store relative
	  # paths (they might be used later of aclocal outputs an
	  # m4_include for this file, or if the user itself includes
	  # this file).
	  $ifile = "$base/$ifile"
	    unless $base eq '.' || File::Spec->file_name_is_absolute ($ifile);
	  push (@inc_files, $ifile);
	  $inc_lines{$ifile} = $.;
	}
    }
  $file_contents{$file} = $contents;

  # For some reason I don't understand, it does not work
  # to do `map { scan_file ($_, ...) } @inc_files' below.
  # With Perl 5.8.2 it undefines @inc_files.
  my @copy = @inc_files;
  my @all_inc_files = (@inc_files,
		       map { scan_file ($type, $_,
					"$file:$inc_lines{$_}") } @copy);
  $file_includes{$file} = \@all_inc_files;
  return @all_inc_files;
}

# strip_redundant_includes (%FILES)
# ---------------------------------
# Each key in %FILES is a file that must be present in the output.
# However some of these files might already include other files in %FILES,
# so there is no point in including them another time.
# This removes items of %FILES which are already included by another file.
sub strip_redundant_includes (%)
{
  my %files = @_;
  # Files at the end of @file_order should override those at the beginning,
  # so it is important to preserve these trailing files.  We can remove
  # a file A if it is going to be output before a file B that includes
  # file A, not the converse.
  foreach my $file (reverse @file_order)
    {
      next unless exists $files{$file};
      foreach my $ifile (@{$file_includes{$file}})
	{
	  next unless exists $files{$ifile};
	  delete $files{$ifile};
	  verb "$ifile is already included by $file";
	}
    }
  return %files;
}

sub trace_used_macros ()
{
  my %files = map { $map{$_} => 1 } keys %macro_seen;
  $files{'acinclude.m4'} = 1 if -f 'acinclude.m4';
  %files = strip_redundant_includes %files;
  # configure.ac is implicitly included.
  delete $files{$configure_ac};

  my $traces = ($ENV{AUTOM4TE} || 'autom4te');
  $traces .= " --language Autoconf-without-aclocal-m4 ";
  # All candidate files.
  $traces .= join (' ', grep { exists $files{$_} } @file_order) . " ";
  # All candidate macros.
  $traces .= join (' ',
		   (map { "--trace='$_:\$f::\$n::\$1'" } ('AC_DEFUN',
							  'AC_DEFUN_ONCE',
							  'AU_DEFUN')),
		   # Do not trace $1 for all other macros as we do
		   # not need it and it might contains harmful
		   # characters (like newlines).
		   (map { "--trace='$_:\$f::\$n'" } (keys %macro_seen)));

  verb "running $traces $configure_ac";

  my $tracefh = new Automake::XFile ("$traces $configure_ac |");

  my %traced = ();

  while ($_ = $tracefh->getline)
    {
      chomp;
      my ($file, $macro, $arg1) = split (/::/);

      $traced{$macro} = 1 if exists $macro_seen{$macro};

      $map_traced_defs{$arg1} = $file
	if ($macro eq 'AC_DEFUN'
	    || $macro eq 'AC_DEFUN_ONCE'
	    || $macro eq 'AU_DEFUN');
    }

  $tracefh->close;

  return %traced;
}

sub scan_configure ()
{
  # Make sure we include acinclude.m4 if it exists.
  if (-f 'acinclude.m4')
    {
      add_file ('acinclude.m4');
    }
  scan_configure_dep ($configure_ac);
}

################################################################

# Write output.
sub write_aclocal ($@)
{
  my ($output_file, @macros) = @_;
  my $output = '';

  my %files = ();
  # Get the list of files containing definitions for the macros used.
  # (Filter out unused macro definitions with $map_traced_defs.  This
  # can happen when an Autoconf macro is conditionally defined:
  # aclocal sees the potential definition, but this definition is
  # actually never processed and the Autoconf implementation is used
  # instead.)
  for my $m (@macros)
    {
      $files{$map{$m}} = 1
	if (exists $map_traced_defs{$m}
	    && $map{$m} eq $map_traced_defs{$m});
    }
  # Always include acinclude.m4, even if it does not appear to be used.
  $files{'acinclude.m4'} = 1 if -f 'acinclude.m4';
  # Do not explicitly include a file that is already indirectly included.
  %files = strip_redundant_includes %files;
  # Never include configure.ac :)
  delete $files{$configure_ac};

  for my $file (grep { exists $files{$_} } @file_order)
    {
      # Check the time stamp of this file, and of all files it includes.
      for my $ifile ($file, @{$file_includes{$file}})
	{
	  my $mtime = mtime $ifile;
	  $greatest_mtime = $mtime if $greatest_mtime < $mtime;
	}

      # If the file to add looks like outside the project, copy it
      # to the output.  The regex catches filenames starting with
      # things like `/', `\', or `c:\'.
      if ($file_type{$file} != FT_USER
	  || $file =~ m,^(?:\w:)?[\\/],)
	{
	  $output .= $file_contents{$file} . "\n";
	}
      else
	{
	  # Otherwise, simply include the file.
	  $output .= "m4_include([$file])\n";
	}
    }

  # Nothing to output?!
  # FIXME: Shouldn't we diagnose this?
  return if ! length ($output);

  # We used to print `# $output_file generated automatically etc.'  But
  # this creates spurious differences when using autoreconf.  Autoreconf
  # creates aclocal.m4t and then rename it to aclocal.m4, but the
  # rebuild rules generated by Automake create aclocal.m4 directly --
  # this would gives two ways to get the same file, with a different
  # name in the header.
  $output = "# generated automatically by aclocal $VERSION -*- Autoconf -*-

# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
# Free Software Foundation, Inc.
# This file is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

$output";

  # We try not to update $output_file unless necessary, because
  # doing so invalidate Autom4te's cache and therefore slows down
  # tools called after aclocal.
  #
  # We need to overwrite $output_file in the following situations.
  #   * The --force option is in use.
  #   * One of the dependencies is younger.
  #     (Not updating $output_file in this situation would cause
  #     make to call aclocal in loop.)
  #   * The contents of the current file are different from what
  #     we have computed.
  if (!$force_output
      && $greatest_mtime < mtime ($output_file)
      && $output eq contents ($output_file))
    {
      verb "$output_file unchanged";
      return;
    }

  verb "writing $output_file";

  my $out = new Automake::XFile "> $output_file";
  print $out $output;
  return;
}

################################################################

# Print usage and exit.
sub usage ($)
{
  my ($status) = @_;

  print "Usage: aclocal [OPTIONS] ...

Generate `aclocal.m4' by scanning `configure.ac' or `configure.in'

Options:
      --acdir=DIR           directory holding config files (for debugging)
      --force               always update output file
      --help                print this help, then exit
  -I DIR                    add directory to search list for .m4 files
      --output=FILE         put output in FILE (default aclocal.m4)
      --print-ac-dir        print name of directory holding m4 files, then exit
      --verbose             don't be silent
      --version             print version number, then exit
  -W, --warnings=CATEGORY   report the warnings falling in CATEGORY

Warning categories include:
  `syntax'        dubious syntactic constructs (default)
  `unsupported'   unknown macros (default)
  `all'           all the warnings (default)
  `no-CATEGORY'   turn off warnings in CATEGORY
  `none'          turn off all the warnings
  `error'         treat warnings as errors

Report bugs to <bug-automake\@gnu.org>.\n";

  exit $status;
}

# Print version and exit.
sub version()
{
  print <<EOF;
aclocal (GNU $PACKAGE) $VERSION
Written by Tom Tromey <tromey\@redhat.com>
       and Alexandre Duret-Lutz <adl\@gnu.org>.

Copyright (C) 2004 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
  exit 0;
}

# Parse command line.
sub parse_arguments ()
{
  my $print_and_exit = 0;

  my %cli_options =
    (
     'acdir=s'		=> sub # Setting --acdir overrides both the
                             { # automake (versioned) directory and the
			       # public (unversioned) system directory.
			       @automake_includes = ();
			       @system_includes = ($_[1])
			     },
     'force'		=> \$force_output,
     'I=s'		=> \@user_includes,
     'output=s'		=> \$output_file,
     'print-ac-dir'     => \$print_and_exit,
     'verbose'		=> sub { setup_channel 'verb', silent => 0; },
     'W|warnings:s'     => \&parse_warnings,
     );
  use Getopt::Long;
  Getopt::Long::config ("bundling", "pass_through");

  # See if --version or --help is used.  We want to process these before
  # anything else because the GNU Coding Standards require us to
  # `exit 0' after processing these options, and we can't guarantee this
  # if we treat other options first.  (Handling other options first
  # could produce error diagnostics, and in this condition it is
  # confusing if aclocal does `exit 0'.)
  my %cli_options_1st_pass =
    (
     'version' => \&version,
     'help'    => sub { usage(0); },
     # Recognize all other options (and their arguments) but do nothing.
     map { $_ => sub {} } (keys %cli_options)
     );
  my @ARGV_backup = @ARGV;
  Getopt::Long::GetOptions %cli_options_1st_pass
    or exit 1;
  @ARGV = @ARGV_backup;

  # Now *really* process the options.  This time we know
  # that --help and --version are not present.
  Getopt::Long::GetOptions %cli_options
    or exit 1;

  if (@ARGV)
    {
      fatal ("unrecognized option `$ARGV[0]'\n"
	     . "Try `$0 --help' for more information.");
    }

  if ($print_and_exit)
    {
      print "@system_includes\n";
      exit 0;
    }

  if (! -d $system_includes[0])
    {
      # By default $(datadir)/aclocal doesn't exist.  We don't want to
      # get an error in the case where we are searching the default
      # directory and it hasn't been created.  (We know
      # @system_includes has its default value if @automake_includes
      # is not empty, because --acdir is the only way to change this.)
      @system_includes = () if @automake_includes;
    }
  else
    {
      # Finally, adds any directory listed in the `dirlist' file.
      if (open (DIRLIST, "$system_includes[0]/dirlist"))
	{
	  while (<DIRLIST>)
	    {
	      # Ignore '#' lines.
	      next if /^#/;
	      # strip off newlines and end-of-line comments
	      s/\s*\#.*$//;
	      chomp;
	      push (@system_includes, $_) if -d $_;
	    }
	  close (DIRLIST);
	}
    }
}

################################################################

parse_WARNINGS;		    # Parse the WARNINGS environment variable.
parse_arguments;
$configure_ac = require_configure_ac;
scan_m4_files;
scan_configure;
if (! $exit_code)
  {
    my %macro_traced = trace_used_macros;
    write_aclocal ($output_file, keys %macro_traced);
  }
check_acinclude;

exit $exit_code;

### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
