## automake - create Makefile.in from Makefile.am
## Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
## Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.

## The way to make PostScript, for those who want it.
DVIPS = dvips
.dvi.ps:
	$(DVIPS) $< -o $@

.PHONY: info info-am dvi dvi-am
if %?SUBDIRS%
RECURSIVE_TARGETS += info-recursive dvi-recursive
.PHONY info: info-recursive
.PHONY dvi: dvi-recursive
else %?SUBDIRS%
info: info-am
dvi: dvi-am
endif %?SUBDIRS%

info-am: $(INFO_DEPS)
dvi-am: $(DVIS)

## Look in both . and srcdir because the info pages might have been
## rebuilt in the build directory.  Can't cd to srcdir; that might
## break a possible install-sh reference.
##
## Funny name due to --cygnus influence; we want to reserve
## `install-info' for the user.
##
## TEXINFOS primary are always installed in infodir, hence install-data
## is hard coded.
if %?INSTALL-INFO%
_am_installdirs += $(DESTDIR)$(infodir)
install-data-am: install-info-am
if %?SUBDIRS%
RECURSIVE_TARGETS += install-info-recursive
.PHONY install-info: install-info-recursive
else %?SUBDIRS%
.PHONY install-info: install-info-am
endif %?SUBDIRS%
endif %?INSTALL-INFO%
install-info-am: $(INFO_DEPS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(infodir)
	@list='$(INFO_DEPS)'; \
	for file in $$list; do \
?CYGNUS?	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
?!CYGNUS?	  d=$(srcdir); \
## We use these strange circumlocutions because we want the "ifile" to
## be relative, for the install.
	  for ifile in `CDPATH=: && cd $$d && echo $$file $$file-[0-9] $$file-[0-9][0-9]`; do \
	    if test -f $$d/$$ifile; then \
	      echo " $(INSTALL_DATA) $$d/$$ifile $(DESTDIR)$(infodir)/$$ifile"; \
	      $(INSTALL_DATA) $$d/$$ifile $(DESTDIR)$(infodir)/$$ifile; \
	    else : ; fi; \
	  done; \
	done
	@$(POST_INSTALL)
## Only run this code if install-info actually exists, and it is not
## the Debian install-info.  FIXME: once Debian install-info goes
## away, we can remove this hack.
	@if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $$list; do \
## Run `:' after install-info in case install-info fails.  We really
## don't care about failures here, because they can be spurious.  For
## instance if you don't have a dir file, install-info will fail.  I
## think instead it should create a new dir file for you.  This bug
## causes the `make distcheck' target to fail reliably.
	    echo " install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$$file";\
## Use `|| :' here because Sun make passes -e to sh; if install-info
## fails then we'd fail if we used `;'.
	    install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$$file || :;\
	  done; \
	else : ; fi


## ------------------------- ##
## Uninstalling info pages.  ##
## ------------------------- ##

?SUBDIRS?RECURSIVE_TARGETS += uninstall-info-recursive
?SUBDIRS?.PHONY uninstall-info: uninstall-info-recursive
?!SUBDIRS?.PHONY uninstall-info: uninstall-info-am
?INSTALL-INFO?uninstall-am: uninstall-info-am

uninstall-info-am:
	$(PRE_UNINSTALL)
## Run two loops here so that we can handle PRE_UNINSTALL and
## NORMAL_UNINSTALL correctly.
	@if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $$list; do \
## install-info needs the actual info file.  We use the installed one,
## rather than relying on one still being in srcdir or builddir.
	    echo " install-info --info-dir=$(DESTDIR)$(infodir) --remove $(DESTDIR)$(infodir)/$$file"; \
	    install-info --info-dir=$(DESTDIR)$(infodir) --remove $(DESTDIR)$(infodir)/$$file; \
	  done; \
	else :; fi
	@$(NORMAL_UNINSTALL)
	@list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  (if cd $(DESTDIR)$(infodir); then \
	     echo " rm -f $$file $$file-[0-9] $$file-[0-9][0-9])"; \
	     rm -f $$file $$file-[0-9] $$file-[0-9][0-9]; \
	   else :; fi); \
	done

.PHONY: dist-info
dist-info: $(INFO_DEPS)
	list='$(INFO_DEPS)'; \
	for base in $$list; do \
## In Cygnus mode, allow info file to be in source or build dir.  In
## other modes, allow only source dir.
?!CYGNUS?	  d=$(srcdir); \
?CYGNUS?	  if test -f $$base; then d=.; else d=$(srcdir); fi; \
	  for file in `CDPATH=: && cd $$d && eval echo $$base*`; do \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file; \
	  done; \
	done


## How to clean.  The funny name is due to --cygnus influence; in
## Cygnus mode, `clean-info' is a target that users can use.

.PHONY: mostlyclean-aminfo
mostlyclean-am: mostlyclean-aminfo
mostlyclean-aminfo:
	-rm -f %TEXICLEAN%

.PHONY: maintainer-clean-aminfo
maintainer-clean-am: maintainer-clean-aminfo
maintainer-clean-aminfo:
## Eww.  But how else can we find all the output files from makeinfo?
?!CYGNUS?	cd $(srcdir) && \
	for i in $(INFO_DEPS); do \
	  rm -f $$i; \
	  if test "`echo $$i-[0-9]*`" != "$$i-[0-9]*"; then \
	    rm -f $$i-[0-9]*; \
	  fi; \
	done

?CYGNUS?.PHONY: clean-info
?CYGNUS?clean-info: mostlyclean-aminfo
