Priorities for release:
* Check all require_file errors to see if any should reference a line in
  Makefile.am or configure.in.  [handle_configure does]
* test gettext stuff for po/intl?
* handle AC_CONFIG_AUX_DIR; must include install-sh
  what about mkinstalldirs, mdate-sh?


Other priorities:
* Must rewrite am_install_var.  Should break into multiple functions.
  This will allow the callers to be a little smarter.
* Rewrite clean targets.
* Expand test suite.

should allow something like this:
  pkgdata_DATA = samples/access samples/config samples/motd samples/users


Testing: allow support for Cygnus-style dejagnu-based test suites via
an option

when in subdir that itself has subdirs, might need to do
include-by-reference TAGS file.

Think about ways to make automake fit better with Cygnus-style trees.

Use recode in dist target when MAIN_CHARSET specified.  Read caveats
in automake.in before doing this.  Note the same problem used to apply
to the no-dependencies option; maybe it still should?  Note also that
each Makefile.am must be rewritten at "make dist" time if
MAINT_CHARSET and DIST_CHARSET are not identical.  NOTE: gettext must
arrange for all .po files not to be recoded.  In the long term this
might be a problem (consider when some systems use Unicode but the
rest do not)

Handle dist-zoo and dist-zip.  Generally add more DOS support.  Maybe
run "doschk" (why isn't this merged with "pathchk"?) when doing a
dist.  Do whatever else François says here...

Add support for html via an option.  Use texi2html.  Use
"html_TEXINFOS", and htmldir = .../html.  Include html files in
distribution.  Also allow "html_DATA", for raw .html files.
  [ when will texinfo support html? ]

if configure.in not found, move up a directory and try again?  This
could eliminate a common source of problems.

uninstall and pkg-dirs should rm -rf the dir.

a potential bug: configure puts "blah.o" into LIBOBJS, thus implying
these files can't be de-ansified.  Not a problem?

In general most .am files should be merged into automake.  For
instance all the "clean" targets could be merged by keeping lists of
things to be removed.  This would be a lot nicer looking.  Note that
the install targets probably should not be merged; it is sometimes
useful to only install a small part.

Clean up the output:
* Order rules sensibly
* Ensure every line has a purpose.  Omit unused stuff
* Eliminate extraneous rules when possible (eg 'install-am' stuff)
* Make sure vertical spacing is correct
* pretty-print targets
* regularize how backslash-newline is done.  Just one space between text
  and backslash should be the rule.  Update makefile-mode to allow this.
  (set column to 0, probably)

It should be possible to have ansi2knr in just one place in a package.
Jim Meyering says just rely on configure to make links as appropriate.
Maybe introduce syntax like this:
	AUTOMAKE_OPTIONS = ../ansi2knr
?

Lex, yacc support:
* It would be nice to automatically support using bison's better features
  to rename the output files.  This requires autoconf support
* Consider supporting syntax from autoconf "derived:source", eg:
	y.tab.c:perly.y
  for yacc and lex source
* if AC_PROG_LEX used, ensure LEXLIB is in foo_LDADD
* require AC_DECL_YYTEXT for lex

require AC_PROG_CXX if any C++ source files found?
Better support for C++ all around

Write autoconf macro to do all work necessary for automake.  Eg define
PACKAGE, VERSION, etc.

'maintainer-clean' should "rm -rf .deps".  Ditto distclean
Should look for clean-local targets in Makefile.am.

It might be cool to generate .texi dependencies by grepping for
@include.  (If done, it should be done the same way C dependencies are
done)

It would be good to check some parts of GNU standards.  Already check
for install-sh and mkinstalldirs.  What else is required to be in
package by GNU standards or by automake?
Some things for --strictness=gnits:
* "cd $(foo); something" is an error in a rule.  Should be:
  "cd $(foo) && something"
* Look for 'ln -s' and warn about using $(LN) and AC_PROG_LN_S
* Look for $(LN) and require AC_PROG_LN_S

automake.in: should ".cc" really -> "$o"?  This doesn't really seem
right, but maybe it is so names can be rewritten uniformly?  Must
check

Auto-distribute "ChangeLog.[0-9]+"?  "ChangeLog.[a-z]+"?

Internationalize. [ gettext doesn't have the necessary machinery yet ]
am_error should use printf-style arguments (for eventual gettext scheme)

François says the ordering of files in a distribution should be as follows:
* README
* source files
* derived files
I agree, but I don't see how to implement this yet.
It might be easier if "derived files" is limited to those that
Automake itself knows about, eg output of yacc.

Should COPYING.LIB be distributed?

Check all source files to make sure that FSF address is up-to-date.
--gnits or --gnu only.

Merge each -vars.am file with corresponding ".am" file.  Can do this
because of changes to &file_contents.

Looked at a program called 'ezmake', which seems to do something
similar.  The only idea there that is possibly worth stealing is using
globs in definitions.  Also has negations.  Eg in a directory with
files a.c, b.c and c.c, the line:
	foo_SOURCES = *.c ~c.c
would be equivalent to:
	foo_SOURCES = a.c b.c
Is this worth implementing?

Should libexec programs have the name transform done on them?

Order the output rules sensibly, so FOO_SOURCES and FOO_OBJECTS are
together and rules are in the usual order.

Make the output minimal: only output definitions for variables that
are used.

Look at dist's jmake for ideas.  dist is the name of the distribution
including Metaconfig.  Perl uses it.

Should handle directory hierarchies deeper than 2.  Right now there is
some support for this.  Here are some of the issues:
* Should handle AC_CONFIG_SUBDIRS, ie must handle configure.in in subdirs
* Must handle SUBDIRS in subdir Makefile.am's
* Must handle AC_CONFIG_AUX_DIR
  * FIXME must already look in .. and ../..

================================================================

Document:


Defined variables, their meanings, and their effects:

DEFS           cpp definitions
INCLUDES       -I options to cpp
CPPFLAGS       more cpp flags
CFLAGS         flags to cc
COMPILE	       how to compile a C program
LINK           how to link a C program

DIST_SUBDIRS   directories which are copied verbatim into the
               distribution.  Used eg for directories holding
               only example code (which don't have their own
               makefile).  This variable might be a bad idea.

Document customary ordering of Makefile.am.  From François.

Must document BUILT_SOURCES variable.  See depend.am.

Should include extended version of diagram from Autoconf (suggested by
Greg Woods)

must document check, install-info targets

================================================================

Libraries:

* Should support standalone library along with subdir library in same
  Makefile.am.  Maybe: turn off "standalone" mode if library's Makefile.am
  is not only one specd? [ add an option for this ]
* Need a way to handle shared libraries.
  It would be really interesting to be able to easily (as the end-user)
  make many different versions of the library: shared, static, profiling,
  debug, optimized...
  How does Perl handle this?  How does glibc handle this?
  This needs autoconf support

Some examples to keep in mind while doing this:
* readline
* kpathsea

================================================================

Have a program that generates a Makefile on stdout, passes it through
a "config.status"-style filter, and thence into make.  Why bother,
other than the gee-whiz factor?

Would it be useful to integrate in some way with the Debian package
building utility?  Must check.  maybe it would be possible to deal
with all the different package utilities somehow.

================================================================

A tool to guess what the local Makefile.am should look like:

* Probably integrate with autoscan
* Use various simple rules to determine what to do:
  * get name of top directory, sans version info
  * search for .c files with 'main' in them
    * if in main.c, use directory name for program
    * if in more than one, generate multiple programs
    * if not found, generate a library named after directory
  * order subdir searches correctly: lib first, src last
  * assume 'testsuite' dir means we are using dejagnu
* maybe be smart about reading existing Makefile.am, so tool
  can be run for incremental changes?  You could imagine:

	Makefile.am:
		autoproject --incremental

================================================================

Stuff NOT to do, and why:

consider auto-including any file that matches "*.in".
  [ no: po/Makefile.in shouldn't be included ]

must look at mkid to see how it works (for subdir usage)
  [ right now, it doesn't.  i don't see a simple fix right now ]

