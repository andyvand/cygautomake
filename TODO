consider rules to re-make Makefile.in from Makefile.am

must look at mkid to see how it works (for subdir usage)

must fix install-info rule in texinfos.am

better error checking.  For instance this should cause an error:
	LIBRARIES = zardoz
	foo_SOURCES = ...
(this chokes if a previous Makefile had 'foo' as a program or library.
Maybe the body of the loop in automake should be in a subshell)

clean.am: clean: if all the macros are empty, the rule expands to:
	rm -rf
which should be fixed

Must handle case where multiple programs are built in one directory
and share many object files (eg pax, cpio).  (Right now conflicts
occur in "make dist")
* I've done this using the _SOURCES hack.  This might even be the right
  way to go.
* It might be nice to do this on a per-program basis.  Think of a way.
  Maybe $(prog_LDADD)?
[the _SOURCES hack is insufficient for cpio.  Think of something better.]

================================================================

For CONFIG_HEADER,
  generate automatic dependencies for the object files.
  automatically add its input file to the distribution.

Deal with optional object files and programs (@foo@) better.
	[Presently this is handled using ALLPROGRAMS, decidedly hacky]
Ditto for programs that are scripts.
Right now it's just kludgy workarounds.

Don't hardcode the name of the configuration header.  Get it from
configure.in (AC_CONFIG_HEADER).  

Get the list of Makefiles to create from configure.in AC_OUTPUT
if none are given.

Should libexec programs have the name transform done on them?
	[No]

Order the output rules sensibly, so FOO_SOURCES and FOO_OBJECTS are
together and rules are in the usual order.

Make the output minimal: only output definitions for variables that
are used.

Rewrite in Perl.  Look at dist's jmake for ideas.

Should handle directory hierarchies deeper than 2.  Right now there is
no support for this at all.

================================================================

Document:


Defined variables, their meanings, and their effects:

DEFS           cpp definitions
INCLUDES       -I options to cpp
CPPFLAGS       more cpp flags
CFLAGS         flags to cc
SOURCES        any sources (do not use?)
CONFIG_HEADER  path to config.h
SUBDIRS        subdirectories to build in.  means this is a "top level"
               directory.
PROGRAMS       list of programs to build.  sources for program `foo' are
               in foo_SOURCES.  objects are auto-build.  (only put .c
               files in foo_SOURCES)
LIBPROGRAMS    programs to build and install in libexec
SCRIPTS        programs which are actually scripts (architecture
               independent)
LIBSCRIPTS     scripts to build and install in lib
LIBRARIES      libraries to build.  sources for library `foo' are
               in foo_SOURCES.  Only put .c file name in that variable.
TEXINFOS       texinfo files to build.  must end in ".texi"
MANS           man pages to install
ALLPROGRAMS    like PROGRAMS, but used at build time.  define this if
               the programs you want to build are determined by configure.
HEADERS        All .h files in program

If your Makefile.am includes "@kr@", then ansi->kr conversion is
assumed.

DIST_OTHER     whatever files you want to include in the distribution.
               Note that most common files (eg "configure.in") are
               automatically found by automake.

DIST_SUBDIRS   directories which are copied verbatim into the
               distribution.  Used eg for directories holding
               only example code (which don't have their own
               makefile).  This variable might be a bad idea.

It is assumed that your configure script defines VERSION and PACKAGE.
These variables are used when making the distribution.  The
distribution file will be a gzip'd tar file named
PACKAGE-VERSION.tar.gz.
