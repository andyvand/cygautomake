Top priorities:
* Must rewrite am_install_var.  Should break into multiple functions.
  This will allow the callers to be a little smarter.
* Rewrite clean targets.

Handle MAINT_CHARSET.  Use recode in dist target.  Handle dist-zoo and
dist-zip.

Add support for html via an option.  Use texi2html.  Use
"html_TEXINFOS", and htmldir = .../html.  Include html files in
distribution.  Also allow "html_DATA", for raw .html files.

if configure.in not found, move up a directory and try again?  This
could eliminate a common source of problems.

uninstall and pkg-dirs should rm -rf the dir.

a potential bug: configure puts "blah.o" into LIBOBJS, thus implying
these files can't be de-ansified.  Not a problem?

In general most .am files should be merged into automake.  For
instance all the "clean" targets could be merged by keeping lists of
things to be removed.  This would be a lot nicer looking.  Note that
the install targets probably should not be merged; it is sometimes
useful to only install a small part.

Clean up the output:
* Order rules sensibly
* Ensure every line has a purpose.  Omit unused stuff
* Eliminate extraneous rules when possible (eg 'install-am' stuff)
* Make sure vertical spacing is correct
* pretty-print targets
* regularize how backslash-newline is done.  Just one space between text
  and backslash should be the rule.  Update makefile-mode to allow this.
  (set column to 0, probably)

It should be possible to have ansi2knr in just one place in a package.
Jim Meyering says just rely on configure to make links as appropriate.
Not sure how I feel about this.

Consider automatic support for ".y" files.
  [ not right now; it is nice to be able to print the number of
    expected conflicts, and we can't handle that ]
What about ".l" files?
Consider supporting syntax from autoconf "derived:source", eg:
	y.tab.c:perly.y

Write autoconf macro to do all work necessary for automake.  Eg define
PACKAGE, VERSION, etc.

Change glob pattern to look for to '*/Makefile*.am', so that gettext's
po directory can use a Makefile.in.am (and generate Makefile.in.in)

Should 'distclean' remove $(SCRIPTS)?
Should 'maintainer-clean' do "rm -rf .deps"?
Should look for clean-local targets in Makefile.am.

If 'foo' is in SCRIPTS, and 'foo.in' exists, generate code to rebuild
by running configure.  Also, ensure that 'foo' is listed in AC_OUTPUT
line.

Think about writing a small tool to guess what the local Makefile.am
should look like.

It might be cool to generate .texi dependencies by grepping for
@include.  (If done, it should be done the same way C dependencies are
done)

It would be good to check some parts of GNU standards.  Already check
for install-sh and mkinstalldirs.  What else is required to be in
package by GNU standards or by automake?
Some things for --strictness=gnits:
* "cd $(foo); something" is an error in a rule.  Should be:
  "cd $(foo) && something"

automake.in: should ".cc" really -> "$o"?  This doesn't really seem
right, but maybe it is so names can be rewritten uniformly?  Must
check

look in configure.in's AC_OUTPUT command and include those files in
distribution.  Or consider new CONFIGURED_FILES macro that lists files
generated by config.status.

Auto-distribute "ChangeLog.[0-9]+"?

consider auto-including any file that matches "*.in".
  [ no: po/Makefile.in shouldn't be included ]

must look at mkid to see how it works (for subdir usage)
  [ right now, it doesn't.  i don't see a simple fix right now ]

Internationalize. [ gettext doesn't have the necessary machinery yet ]
am_error should use printf-style arguments (for eventual gettext scheme)

write test suite

François says the ordering of files in a distribution should be as follows:
* README
* source files
* derived files
I agree, but I don't see how to implement this yet.
It might be easier if "derived files" is limited to those that
Automake itself knows about, eg output of yacc.

Should COPYING.LIB be distributed?

Check all source files to make sure that FSF address is up-to-date.
--gnits or --gnu only.

Merge each -vars.am file with corresponding ".am" file.  Can do this
because of changes to &file_contents.

Looked at a program called 'ezmake', which seems to do something
similar.  The only idea there that is possibly worth stealing is using
globs in definitions.  Also has negations.  Eg in a directory with
files a.c, b.c and c.c, the line:
	foo_SOURCES = *.c ~c.c
would be equivalent to:
	foo_SOURCES = a.c b.c
Is this worth implementing?

Get the list of Makefiles to create from configure.in AC_OUTPUT
if none are given.
	[ right now we look for any Makefile.am's lying around
	  I think this is better, because it allows use of subdirs
	  which don't use automake -- eg, stuff from gettext ]

Should libexec programs have the name transform done on them?

Order the output rules sensibly, so FOO_SOURCES and FOO_OBJECTS are
together and rules are in the usual order.

Make the output minimal: only output definitions for variables that
are used.

Look at dist's jmake for ideas.  dist is the name of the distribution
including Metaconfig.  Perl uses it.

Should handle directory hierarchies deeper than 2.  Right now there is
no support for this at all.  Here are some of the issues:
* Should handle AC_CONFIG_SUBDIRS, ie must handle configure.in in subdirs
* Must handle SUBDIRS in subdir Makefile.am's
* Must handle AC_CONFIG_AUX_DIR
  * FIXME must already look in .. and ../..
  * Look for install.sh and give error!
* All this means there should be a "configure_dir" macro which points
  to the directory in which config.status resides.  This should be used
  in eg remake-subd.am.

================================================================

Document:


Defined variables, their meanings, and their effects:

DEFS           cpp definitions
INCLUDES       -I options to cpp
CPPFLAGS       more cpp flags
CFLAGS         flags to cc
COMPILE	       how to compile a C program
LINK           how to link a C program

DIST_SUBDIRS   directories which are copied verbatim into the
               distribution.  Used eg for directories holding
               only example code (which don't have their own
               makefile).  This variable might be a bad idea.

lib_LIBADD	code conditionally included in a library
		This probably needs to be redone anyway.

SUFFIXES	additional suffixes

Document customary ordering of Makefile.am.  From Franc,ois.

Must document BUILT_SOURCES variable.  See depend.am.

How to deal with @LIBOBJS@.
configure scanning
putting .h files into blah_SOURCES is ok now
version.texi handling

================================================================

Libraries:

* Should support standalone library along with subdir library in same
  Makefile.am.  Maybe: turn off "standalone" mode if library's Makefile.am
  is not only one specd? [ add an option for this ]
* Need a way to handle shared libraries.
  It would be really interesting to be able to easily (as the end-user)
  make many different versions of the library: shared, static, profiling,
  debug, optimized...
  How does Perl handle this?  How does glibc handle this?
  This needs autoconf support

Some examples to keep in mind while doing this:
* readline
* kpathsea

================================================================

Have a program that generates a Makefile on stdout, passes it through
a "config.status"-style filter, and thence into make.  Why bother,
other than the gee-whiz factor?

Would it be useful to integrate in some way with the Debian package
building utility?  Must check.
